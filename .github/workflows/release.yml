concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true
name: Build Release

on:
  workflow_dispatch:
permissions:
  actions: write
  contents: write
jobs:
  config:
    outputs:
      config_package: ${{ steps.config_package.outputs.configPackage }}
    runs-on: ubuntu-latest
    steps:
      - id: config_package
        name: Ensure that required repository variable has been created for the Package
        run: |
          if [ "${{ vars.PACKAGE_NAME }}" != "" ]; then
            echo "configPackage=true" >> $GITHUB_OUTPUT;
          else
            echo "configPackage=false" >> $GITHUB_OUTPUT;
          fi

  prepare:
    if: ${{ needs.config.outputs.config_package == 'true' }}
    needs: config
    outputs:
      stableVersion: ${{ steps.resolve.outputs.stableVersion }}
      unityPackage: ${{ steps.resolve.outputs.unityPackage }}
      version: ${{ steps.resolve.outputs.version }}
      zipFile: ${{ steps.resolve.outputs.zipFile }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Local Repository
        uses: actions/checkout@v4
      - id: version
        name: Get the Package version based on the package.json file
        # cspell: disable-next-line
        uses: sergeysova/jq-action@v2
        with:
          cmd: jq -r ".version" "Packages/${{ vars.PACKAGE_NAME }}/package.json"
      - id: stable-match
        name: Detect whether the version is a stable release
        # cspell: disable-next-line
        uses: kaisugi/action-regex-match@v1.0.1
        with:
          flags: gm
          regex: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          text: ${{ steps.version.outputs.value }}
      - id: resolve
        name: Resolve build environment values
        run: |
          echo "stableVersion=${{ steps.stable-match.outputs.match }}" >> $GITHUB_OUTPUT
          echo "unityPackage=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}.unitypackage" >> $GITHUB_OUTPUT
          echo "version=${{ steps.version.outputs.value }}" >> $GITHUB_OUTPUT
          echo "zipFile=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}.zip" >> $GITHUB_OUTPUT

  package:
    if: ${{ needs.config.outputs.config_package == 'true' }}
    needs:
      - config
      - prepare
    secrets: inherit
    uses: ./.github/workflows/package-build.yml
    with:
      packagePath: Packages/${{ vars.PACKAGE_NAME }}
      unityPackage: ${{ needs.prepare.outputs.unityPackage }}
      zipFile: ${{ needs.prepare.outputs.zipFile }}

  release:
    env:
      packagePath: Packages/${{ vars.PACKAGE_NAME }}
    if: ${{ needs.config.outputs.config_package == 'true' }}
    needs:
      - config
      - prepare
      - package
    runs-on: ubuntu-latest
    steps:
      - id: gpg
        name: Import the GPG key
        # cspell: disable-next-line
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          trust_level: 5
      - name: Checkout Local Repository
        uses: actions/checkout@v4
      - name: Download package archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.zipFile }}
      - name: Download UnityPackage
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.unityPackage }}
      - name: copy the README and LICENSE files to the Package folder
        run: cp README.md LICENSE "${{ env.packagePath }}"
      - name: Zip the UnityPackage for release
        run: zip -r -9 "${{ needs.prepare.outputs.unityPackage }}.zip" "${{ needs.prepare.outputs.unityPackage }}" LICENSE README.md
      - name: Sign the artifacts
        run: |
          gpg --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" -ab "${{ needs.prepare.outputs.zipFile }}"
          gpg --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" -ab "${{ needs.prepare.outputs.unityPackage }}"
          gpg --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" -ab "${{ needs.prepare.outputs.unityPackage }}.zip"
      - id: tag_version
        name: Create a release tag of the version from the package.json file
        # cspell: disable-next-line
        uses: rickstaa/action-create-tag@v1
        with:
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          tag: "${{ needs.prepare.outputs.version }}"
      - name: Publish the Release to GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ needs.prepare.outputs.zipFile }}
            ${{ needs.prepare.outputs.zipFile }}.asc
            ${{ needs.prepare.outputs.unityPackage }}
            ${{ needs.prepare.outputs.unityPackage }}.asc
            ${{ needs.prepare.outputs.unityPackage }}.zip
            ${{ needs.prepare.outputs.unityPackage }}.zip.asc
            ${{ env.packagePath }}/package.json
          prerelease: ${{ needs.prepare.outputs.stableVersion == '' }}
          tag_name: ${{ needs.prepare.outputs.version }}
